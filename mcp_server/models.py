# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:03:38+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Audience(RootModel[str]):
    root: str


class ExpiredTokenException(RootModel[Any]):
    root: Any


class GetCallerIdentityRequest(BaseModel):
    pass


class IDPCommunicationErrorException(RootModel[Any]):
    root: Any


class IDPRejectedClaimException(RootModel[Any]):
    root: Any


class InvalidAuthorizationMessageException(RootModel[Any]):
    root: Any


class InvalidIdentityTokenException(RootModel[Any]):
    root: Any


class Issuer(RootModel[str]):
    root: str


class MalformedPolicyDocumentException(RootModel[Any]):
    root: Any


class NameQualifier(RootModel[str]):
    root: str


class PackedPolicyTooLargeException(RootModel[Any]):
    root: Any


class RegionDisabledException(RootModel[Any]):
    root: Any


class SAMLAssertionType(RootModel[constr(min_length=4, max_length=100000)]):
    root: constr(min_length=4, max_length=100000)


class Subject(RootModel[str]):
    root: str


class SubjectType(RootModel[str]):
    root: str


class AccessKeyIdType(
    RootModel[constr(pattern=r'[\w]*', min_length=16, max_length=128)]
):
    root: constr(pattern=r'[\w]*', min_length=16, max_length=128)


class AccessKeySecretType(RootModel[str]):
    root: str


class AccountType(RootModel[str]):
    root: str


class ArnType(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+',
        min_length=20,
        max_length=2048,
    )


class AssumedRoleIdType(
    RootModel[constr(pattern=r'[\w+=,.@:-]*', min_length=2, max_length=193)]
):
    root: constr(pattern=r'[\w+=,.@:-]*', min_length=2, max_length=193)


class ClientTokenType(RootModel[constr(min_length=4, max_length=20000)]):
    root: constr(min_length=4, max_length=20000)


class DateType(RootModel[datetime]):
    root: datetime


class DecodedMessageType(RootModel[str]):
    root: str


class DurationSecondsType(RootModel[conint(ge=900, le=129600)]):
    root: conint(ge=900, le=129600)


class EncodedMessageType(RootModel[constr(min_length=1, max_length=10240)]):
    root: constr(min_length=1, max_length=10240)


class ExternalIdType(
    RootModel[constr(pattern=r'[\w+=,.@:\/-]*', min_length=2, max_length=1224)]
):
    root: constr(pattern=r'[\w+=,.@:\/-]*', min_length=2, max_length=1224)


class FederatedIdType(
    RootModel[constr(pattern=r'[\w+=,.@\:-]*', min_length=2, max_length=193)]
):
    root: constr(pattern=r'[\w+=,.@\:-]*', min_length=2, max_length=193)


class NonNegativeIntegerType(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class RoleDurationSecondsType(RootModel[conint(ge=900, le=43200)]):
    root: conint(ge=900, le=43200)


class RoleSessionNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]*', min_length=2, max_length=64)]
):
    root: constr(pattern=r'[\w+=,.@-]*', min_length=2, max_length=64)


class SerialNumberType(
    RootModel[constr(pattern=r'[\w+=/:,.@-]*', min_length=9, max_length=256)]
):
    root: constr(pattern=r'[\w+=/:,.@-]*', min_length=9, max_length=256)


class SessionPolicyDocumentType(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=2048
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=2048
    )


class SourceIdentityType(
    RootModel[constr(pattern=r'[\w+=,.@-]*', min_length=2, max_length=64)]
):
    root: constr(pattern=r'[\w+=,.@-]*', min_length=2, max_length=64)


class TagKeyType(
    RootModel[
        constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]+', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]+', min_length=1, max_length=128)


class TagValueType(
    RootModel[
        constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]*', min_length=0, max_length=256)
    ]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]*', min_length=0, max_length=256)


class TokenCodeType(RootModel[constr(pattern=r'[\d]*', min_length=6, max_length=6)]):
    root: constr(pattern=r'[\d]*', min_length=6, max_length=6)


class TokenType(RootModel[str]):
    root: str


class UrlType(RootModel[constr(min_length=4, max_length=2048)]):
    root: constr(min_length=4, max_length=2048)


class UserIdType(RootModel[str]):
    root: str


class UserNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]*', min_length=2, max_length=32)]
):
    root: constr(pattern=r'[\w+=,.@-]*', min_length=2, max_length=32)


class WebIdentitySubjectType(RootModel[constr(min_length=6, max_length=255)]):
    root: constr(min_length=6, max_length=255)


class Action(Enum):
    AssumeRole = 'AssumeRole'


class Version(Enum):
    field_2011_06_15 = '2011-06-15'


class TransitiveTagKeys(RootModel[List[TagKeyType]]):
    root: List[TagKeyType] = Field(..., max_length=50)


class Action4(Enum):
    AssumeRoleWithSAML = 'AssumeRoleWithSAML'


class Action8(Enum):
    AssumeRoleWithWebIdentity = 'AssumeRoleWithWebIdentity'


class Action12(Enum):
    DecodeAuthorizationMessage = 'DecodeAuthorizationMessage'


class Action16(Enum):
    GetAccessKeyInfo = 'GetAccessKeyInfo'


class Action20(Enum):
    GetCallerIdentity = 'GetCallerIdentity'


class Action24(Enum):
    GetFederationToken = 'GetFederationToken'


class Action28(Enum):
    GetSessionToken = 'GetSessionToken'


class AssumedRoleUser(BaseModel):
    Arn: ArnType
    AssumedRoleId: AssumedRoleIdType


class Credentials(BaseModel):
    AccessKeyId: AccessKeyIdType
    Expiration: DateType
    SecretAccessKey: AccessKeySecretType
    SessionToken: TokenType


class DecodeAuthorizationMessageRequest(BaseModel):
    EncodedMessage: EncodedMessageType


class DecodeAuthorizationMessageResponse(BaseModel):
    DecodedMessage: Optional[DecodedMessageType] = None


class FederatedUser(BaseModel):
    Arn: ArnType
    FederatedUserId: FederatedIdType


class GetAccessKeyInfoRequest(BaseModel):
    AccessKeyId: AccessKeyIdType


class GetAccessKeyInfoResponse(BaseModel):
    Account: Optional[AccountType] = None


class GetCallerIdentityResponse(BaseModel):
    Account: Optional[AccountType] = None
    Arn: Optional[ArnType] = None
    UserId: Optional[UserIdType] = None


class GetFederationTokenResponse(BaseModel):
    Credentials_1: Optional[Credentials] = Field(None, alias='Credentials')
    FederatedUser_1: Optional[FederatedUser] = Field(None, alias='FederatedUser')
    PackedPolicySize: Optional[NonNegativeIntegerType] = None


class GetSessionTokenRequest(BaseModel):
    DurationSeconds: Optional[DurationSecondsType] = None
    SerialNumber: Optional[SerialNumberType] = None
    TokenCode: Optional[TokenCodeType] = None


class GetSessionTokenResponse(BaseModel):
    Credentials_1: Optional[Credentials] = Field(None, alias='Credentials')


class PolicyDescriptorType(BaseModel):
    arn: Optional[ArnType] = None


class Tag(BaseModel):
    Key: TagKeyType
    Value: TagValueType


class PolicyDescriptorListType(RootModel[List[PolicyDescriptorType]]):
    root: List[PolicyDescriptorType]


class TagKeyListType(RootModel[List[TagKeyType]]):
    root: List[TagKeyType] = Field(..., max_length=50)


class TagListType(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50)


class PolicyArns(RootModel[List[PolicyDescriptorType]]):
    root: List[PolicyDescriptorType]


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50)


class AssumeRoleRequest(BaseModel):
    DurationSeconds: Optional[RoleDurationSecondsType] = None
    ExternalId: Optional[ExternalIdType] = None
    Policy: Optional[SessionPolicyDocumentType] = None
    PolicyArns: Optional[PolicyDescriptorListType] = None
    RoleArn: ArnType
    RoleSessionName: RoleSessionNameType
    SerialNumber: Optional[SerialNumberType] = None
    SourceIdentity: Optional[SourceIdentityType] = None
    Tags: Optional[TagListType] = None
    TokenCode: Optional[TokenCodeType] = None
    TransitiveTagKeys: Optional[TagKeyListType] = None


class AssumeRoleResponse(BaseModel):
    AssumedRoleUser_1: Optional[AssumedRoleUser] = Field(None, alias='AssumedRoleUser')
    Credentials_1: Optional[Credentials] = Field(None, alias='Credentials')
    PackedPolicySize: Optional[NonNegativeIntegerType] = None
    SourceIdentity: Optional[SourceIdentityType] = None


class AssumeRoleWithSAMLRequest(BaseModel):
    DurationSeconds: Optional[RoleDurationSecondsType] = None
    Policy: Optional[SessionPolicyDocumentType] = None
    PolicyArns: Optional[PolicyDescriptorListType] = None
    PrincipalArn: ArnType
    RoleArn: ArnType
    SAMLAssertion: SAMLAssertionType


class AssumeRoleWithSAMLResponse(BaseModel):
    AssumedRoleUser_1: Optional[AssumedRoleUser] = Field(None, alias='AssumedRoleUser')
    Audience_1: Optional[Audience] = Field(None, alias='Audience')
    Credentials_1: Optional[Credentials] = Field(None, alias='Credentials')
    Issuer_1: Optional[Issuer] = Field(None, alias='Issuer')
    NameQualifier_1: Optional[NameQualifier] = Field(None, alias='NameQualifier')
    PackedPolicySize: Optional[NonNegativeIntegerType] = None
    SourceIdentity: Optional[SourceIdentityType] = None
    Subject_1: Optional[Subject] = Field(None, alias='Subject')
    SubjectType_1: Optional[SubjectType] = Field(None, alias='SubjectType')


class AssumeRoleWithWebIdentityRequest(BaseModel):
    DurationSeconds: Optional[RoleDurationSecondsType] = None
    Policy: Optional[SessionPolicyDocumentType] = None
    PolicyArns: Optional[PolicyDescriptorListType] = None
    ProviderId: Optional[UrlType] = None
    RoleArn: ArnType
    RoleSessionName: RoleSessionNameType
    WebIdentityToken: ClientTokenType


class AssumeRoleWithWebIdentityResponse(BaseModel):
    AssumedRoleUser_1: Optional[AssumedRoleUser] = Field(None, alias='AssumedRoleUser')
    Audience_1: Optional[Audience] = Field(None, alias='Audience')
    Credentials_1: Optional[Credentials] = Field(None, alias='Credentials')
    PackedPolicySize: Optional[NonNegativeIntegerType] = None
    Provider: Optional[Issuer] = None
    SourceIdentity: Optional[SourceIdentityType] = None
    SubjectFromWebIdentityToken: Optional[WebIdentitySubjectType] = None


class GetFederationTokenRequest(BaseModel):
    DurationSeconds: Optional[DurationSecondsType] = None
    Name: UserNameType
    Policy: Optional[SessionPolicyDocumentType] = None
    PolicyArns: Optional[PolicyDescriptorListType] = None
    Tags: Optional[TagListType] = None
